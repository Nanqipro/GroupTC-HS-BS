#ifndef CUDA_COMM_HEADER
#define CUDA_COMM_HEADER

#include <cuda_runtime_api.h>
#include <device_launch_parameters.h>
#include <math.h>
#include <omp.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/time.h>
#include <thrust/device_ptr.h>
#include <thrust/reduce.h>
#include <thrust/sort.h>

#include <algorithm>
#include <cstdio>
#include <fstream>
#include <iostream>
#include <sstream>
#include <vector>

#include "comm.h"
#include "graph.h"
#include "herror.h"
using namespace std;

#define ArraySize(ARR) (sizeof(ARR) / sizeof(ARR[0]))

__constant__ vertex_t *c_source;
__constant__ vertex_t *c_adj;
__constant__ index_t *c_offset;

/**
 * @brief read graph
 *
 * @param json_file
 */
graph *readGraph(string json_file) {
    graph *graph_d = new graph(json_file);

    int max_degree = 0;
    for (int i = 0; i < graph_d->vertex_count; i++) {
        int degree = graph_d->beg_pos[i + 1] - graph_d->beg_pos[i];
        if (degree > max_degree) {
            max_degree = degree;
        }
    }
    graph_d->max_degree = max_degree;
    return graph_d;
}

/**
 * @brief Calculate the number of triangles that can be generated by the i-th edge using merge
 *
 * @param i
 */
__device__ int c_merge(int i) {
    int triangle_count = 0;

    int u = c_source[i];
    int v = c_adj[i];

    int u_ptr = i + 1;
    // int u_ptr = c_offset[u];;
    int u_end = c_offset[u + 1];

    int v_ptr = c_offset[v];
    int v_end = c_offset[v + 1];

    if (u_ptr == u_end || v_ptr == v_end) {
        return 0;
    }
    int u_neighbor = c_adj[u_ptr];
    int v_neighbor = c_adj[v_ptr];
    while (u_ptr < u_end && v_ptr < v_end) {
        if (u_neighbor < v_neighbor)
            u_neighbor = c_adj[++u_ptr];
        else if (u_neighbor > v_neighbor)
            v_neighbor = c_adj[++v_ptr];
        else {
            // printf("%d %d %d %d\n", u, v, u_neighbor, v_neighbor);
            u_neighbor = c_adj[++u_ptr];
            v_neighbor = c_adj[++v_ptr];
            triangle_count++;
        }
    }
    return triangle_count;
}

int CudaAttr(cudaDeviceAttr attr) {
    int dev, val;
    HRR(cudaGetDevice(&dev));
    HRR(cudaDeviceGetAttribute(&val, attr, dev));
    return val;
}

int NumberOfMPs() { return CudaAttr(cudaDevAttrMultiProcessorCount); }

int WarpSize() { return CudaAttr(cudaDevAttrWarpSize); }

static void HandleError(cudaError_t err, const char *file, int line) {
    if (err != cudaSuccess) {
        printf("%s in %s at line %d\n", cudaGetErrorString(err), file, line);
        exit(EXIT_FAILURE);
    }
}
#endif